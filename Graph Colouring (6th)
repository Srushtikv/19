# Function to check if it's safe to color a node with a given color
def is_safe(node, graph, color, c):
    # Check all neighbors of the current node
    for neighbor in range(len(graph)):
        # If the neighbor is connected and already has the same color, return False
        if graph[node][neighbor] == 1 and color[neighbor] == c:
            return False
    return True  # If no conflict, return True

# Utility function for graph coloring (uses backtracking)
def graph_coloring_util(graph, m, color, node):
    # If all nodes have been assigned a color, return True (solution found)
    if node == len(graph):
        return True

    # Try different colors for the current node
    for c in range(1, m + 1):  # Try colors from 1 to m
        # If it's safe to color the node with color c
        if is_safe(node, graph, color, c):
            color[node] = c  # Assign color to the node
            # Recursively try to color the rest of the nodes
            if graph_coloring_util(graph, m, color, node + 1):
                return True  # If solution is found, return True
            color[node] = 0  # Backtrack if no solution is found, reset the color

    return False  # Return False if no solution is found for this configuration

# Main function to solve the graph coloring problem
def graph_coloring(graph, m):
    color = [0] * len(graph)  # Array to store the color assigned to each node
    # Call the utility function to try coloring the graph starting from node 0
    if graph_coloring_util(graph, m, color, 0):
        return color  # Return the coloring if solution is found
    else:
        return None  # Return None if no solution exists

# Example graph: 4 vertices (Undirected graph)
# Adjacency matrix representation of the graph
graph = [
    [0, 1, 1, 1],  # Vertex 0 is connected to 1, 2, 3
    [1, 0, 1, 0],  # Vertex 1 is connected to 0, 2
    [1, 1, 0, 1],  # Vertex 2 is connected to 0, 1, 3
    [1, 0, 1, 0]   # Vertex 3 is connected to 0, 2
]

m = 3  # Number of colors to use

# Call the graph_coloring function and print the result
result = graph_coloring(graph, m)
if result:
    print(f"Coloring of graph with {m} colors: {result}")
else:
    print(f"No solution exists with {m} colors.")
