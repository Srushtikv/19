# Kruskal's Algorithm using Disjoint Set (Union-Find)

# Disjoint Set (Union-Find) to manage connected components
class DisjointSet:
    def __init__(self, vertices):
        # Each vertex is initially its own parent
        self.parent = {v: v for v in vertices}

    def find(self, v):
        # Path compression optimization
        if self.parent[v] != v:
            self.parent[v] = self.find(self.parent[v])
        return self.parent[v]

    def union(self, u, v):
        # Union two sets. If roots are different, merge them.
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u != root_v:
            self.parent[root_v] = root_u
            return True
        return False

# Graph class to hold vertices and edges
class Graph:
    def __init__(self, vertices):
        self.V = vertices  # Number of vertices
        self.edges = []    # List to store edges: (weight, u, v)

    def add_edge(self, u, v, w):
        # Add edge to the graph
        self.edges.append((w, u, v))

    def kruskal_mst(self):
        mst = []  # List to store edges in the Minimum Spanning Tree
        self.edges.sort()  # Sort edges by weight (Greedy step)
        ds = DisjointSet(range(self.V))  # Initialize disjoint set

        for weight, u, v in self.edges:
            # If u and v are in different components, include the edge
            if ds.union(u, v):
                mst.append((u, v, weight))
        return mst

# Example usage
g = Graph(6)
g.add_edge(0, 1, 4)
g.add_edge(0, 2, 4)
g.add_edge(1, 2, 2)
g.add_edge(1, 3, 5)
g.add_edge(2, 3, 5)
g.add_edge(2, 4, 11)
g.add_edge(3, 4, 2)
g.add_edge(4, 5, 1)

# Compute MST using Kruskal's algorithm
mst = g.kruskal_mst()

# Output the result
print("Edges in the Minimum Spanning Tree using Kruskal's Algorithm:")
for u, v, w in mst:
    print(f"{u} -- {v} == {w}")
