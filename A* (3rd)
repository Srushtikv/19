from heapq import heappop, heappush  # Import heap functions for priority queue

# Directions for movement: up, down, left, right
dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def heuristic(a, b):
    # Manhattan distance heuristic for grid movement
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, end):
    rows, cols = len(grid), len(grid[0])  # Dimensions of the grid
    open_set = []  # Priority queue to hold nodes to explore
    heappush(open_set, (0 + heuristic(start, end), 0, start))  # Push the start node with f = g + h

    came_from = {}  # Dictionary to reconstruct the path
    g_score = {start: 0}  # Cost from start to each node

    while open_set:
        _, current_g, current = heappop(open_set)  # Node with the lowest f_score

        if current == end:
            # Reconstruct the path from end to start
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path  # Return the shortest path

        # Explore neighbors in 4 directions
        for d in dirs:
            neighbor = (current[0] + d[0], current[1] + d[1])

            # Check if neighbor is within bounds and not an obstacle
            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:
                tentative_g = current_g + 1  # Cost from start to neighbor

                # If this path to neighbor is better than any previous one
                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    g_score[neighbor] = tentative_g
                    f_score = tentative_g + heuristic(neighbor, end)  # Total estimated cost
                    heappush(open_set, (f_score, tentative_g, neighbor))  # Add to open set
                    came_from[neighbor] = current  # Track the path

    return None  # Return None if no path is found

# Example grid: 0 - walkable, 1 - obstacle
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0]
]

start = (0, 0)  # Starting position
end = (3, 4)    # Destination

# Execute A* algorithm
path = astar(grid, start, end)

# Display the result
print("Shortest path from", start, "to", end, ":")
print(path if path else "No path found")
