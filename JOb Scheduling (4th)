# Job Scheduling Problem using Greedy Algorithm

class Job:
    def __init__(self, id, profit, deadline):
        self.id = id      # Job ID
        self.profit = profit  # Profit from the job
        self.deadline = deadline  # Deadline by which the job must be completed

def jobScheduling(jobs, n):
    # Sort jobs in decreasing order of profit
    jobs.sort(key=lambda x: x.profit, reverse=True)

    # Create a time slot array to keep track of available slots
    max_deadline = max(job.deadline for job in jobs)  # Maximum deadline in the input jobs
    time_slot = [-1] * (max_deadline + 1)  # -1 indicates the slot is available
    
    job_sequence = []  # To store the sequence of scheduled jobs
    total_profit = 0    # Total profit from the scheduled jobs

    # Iterate through all the jobs
    for job in jobs:
        # Find a slot for the job from its deadline to 1 (in reverse order)
        for t in range(job.deadline, 0, -1):
            if time_slot[t] == -1:  # Slot is available
                time_slot[t] = job.id  # Assign the job to this slot
                job_sequence.append(job.id)  # Add job to the sequence
                total_profit += job.profit  # Add profit to total profit
                break
    
    # Output the results
    print("Jobs scheduled: ", job_sequence)
    print("Total profit: ", total_profit)

# Example usage:
jobs = [
    Job("Job1", 20, 2),
    Job("Job2", 15, 2),
    Job("Job3", 10, 1),
    Job("Job4", 5, 3),
    Job("Job5", 1, 3)
]

n = len(jobs)  # Total number of jobs
jobScheduling(jobs, n)
