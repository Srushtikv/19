import heapq

def dijkstra(graph, V, start):
    """
    graph: adjacency list (graph[u] = list of (v, weight))
    V: total number of vertices
    start: starting vertex
    """
    # Initialize distances from start to all vertices as infinite
    distances = [float('inf')] * V
    distances[start] = 0  # Distance to start node is 0

    # Priority queue to select the vertex with the minimum distance
    min_heap = [(0, start)]  # (distance, vertex)

    while min_heap:
        current_dist, u = heapq.heappop(min_heap)

        # Skip if we have already found a better path
        if current_dist > distances[u]:
            continue

        # Explore all neighbors
        for v, weight in graph[u]:
            if distances[u] + weight < distances[v]:
                distances[v] = distances[u] + weight
                heapq.heappush(min_heap, (distances[v], v))

    # Print the shortest distances from the start vertex
    print(f"Shortest distances from vertex {start}:")
    for i in range(V):
        print(f"{start} -> {i} = {distances[i]}")
# Sample graph as adjacency list
graph = {
    0: [(1, 4), (2, 1)],
    1: [(3, 1)],
    2: [(1, 2), (3, 5)],
    3: []
}
V = 4  # Total vertices
start_vertex = 0

# Run Dijkstra's Algorithm
dijkstra(graph, V, start_vertex)
        
